0. (2pts.)
 Write some code that iterates from 1 to 10 and prints out each integer along the way.

1. (2pts.)
 Copy that code in to a void*/void* function. (test it)

2. (2pts.)
 Malloc an int pointer, set it, pass in to your function as a void* and inside your function, cast it, deference it and
 print that integer out before each iteration of the counter specified in part 0.

3. (2pts.)
 Add code to run five iterations of your void*/void* counting function as a pthread. Assign each of your threads a
 separate 'id' by passing a each a pointer to a different integer as its argument using pthread_create. Be sure to
 pthread_join() for all your threads. Run the code a few times and observe the output.
  (*be sure to deallocate/destroy all dyamically-allocated memory and library structures)

EX. (2pts.)
Create a single mutex and add a pointer to it to the argument of each thread. Modify the threads to have them
pthread_mutex_lock() before entering the print loop and pthread_mutex_unlock after exiting it. Be sure to note the
difference in your output.

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#define THREAD_COUNT 5

pthread_mutex_t mutex_myInt_1;

void* myFirstFunc(void* args) {
    pthread_mutex_lock(&mutex_myInt_1);

    for (int i = 1; i <= 10; ++i) {
        printf("Thread  %d:%d\n", *((int*)args), i);
    }

    pthread_mutex_unlock(&mutex_myInt_1);

    pthread_exit(NULL);
}

int main(int argc, char* argv[])
{
    int* myIntArr = (int*) malloc(sizeof(int) * THREAD_COUNT);

    pthread_mutexattr_t mutexattr;
    pthread_mutexattr_init(&mutexattr);
    pthread_mutex_init(&mutex_myInt_1, &mutexattr);

    pthread_t myThreads[THREAD_COUNT];
    pthread_attr_t pthreadAttr;
    pthread_attr_init(&pthreadAttr);

    for (int i = 0; i < THREAD_COUNT; ++i) {
        myIntArr[i] = i;
        pthread_create(&myThreads[i], &pthreadAttr, myFirstFunc, &myIntArr[i]);
    }

    for (int i = 0; i < THREAD_COUNT; ++i) {
        pthread_join(myThreads[i], NULL);
    }

    pthread_mutex_destroy(&mutex_myInt_1);
    pthread_mutexattr_destroy(&mutexattr);
    pthread_attr_destroy(&pthreadAttr);
    free(myIntArr);

    return 0;
}
